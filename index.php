<?php
require_once "php/error-handling.php";
require_once "RSAKeyAnalysis/Database.php";
require_once "RSAKeyAnalysis/PublicKeyParser.php";
require_once "RSAKeyAnalysis/RenderFunctions.php";
require_once "RSAKeyAnalysis/classification/RawTable.php";
require_once "RSAKeyAnalysis/classification/ClassificationContainer.php";

use RSAKeyAnalysis\PublicKeyParser;

$testkey = '-----BEGIN PUBLIC KEY-----' . PHP_EOL .
           'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCA67eoI3G9jKXpLC5NYJ2qb6TG' . PHP_EOL .
           'imtNitvuzTa8zX8P7Ii2TKlPNS3SLx1VFA3WbAXWJrLB3FkYrMtsOh+YeBDjm0cI' . PHP_EOL .
           'H9UWmHZMGHzCjdH6kA18CRRxK8ILvy3uokWrFEkwSxyAw5tXH8pATK7uTWEfiB8G' . PHP_EOL .
           'Pl8MZT4ukwi7V+ey+wIDAQAB' . PHP_EOL .
           '-----END PUBLIC KEY-----';

$testkey2 = '-----BEGIN PUBLIC KEY-----' . PHP_EOL .
           'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1ZFDL5ad7Pegcme9Ehm1KA5vd' . PHP_EOL .
           'I+dHv0zsm4Zq3GUNCnXIwkf8XPCcEuyztGRIeT2LAN/JEXKDNIVMn80EoYPc/IIu' . PHP_EOL .
           '6+vbc+E3xgbwC63O0CDQhXuku5ddXwhf9lAwZejQkwWjhjI8WlzmMzhZxsOWsKGJ' . PHP_EOL .
           'NU9JspTehFrx515HkQIDAQAB' . PHP_EOL .
           '-----END PUBLIC KEY-----';

$rawTable = \RSAKeyAnalysis\RawTable::load("classificationTable.json");
$apriories = array();
if (array_key_exists('apriori', $_POST)) {
    require_once "RSAKeyAnalysis/apriories.php";
    $apriories = getApriori($_POST['apriori']);
}
$classificationTable = $rawTable->computeClassificationTable($apriories);
$database = new \RSAKeyAnalysis\Database("db", $classificationTable);

/**
 * Keys
 */
const CLASSIFICATION_KEYS_LIMIT = 100;

/**
 * Seconds
 */
const CLASSIFICATION_TIME_LIMIT = 10;
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Classify your RSA key</title>

    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="css/style.css" rel="stylesheet">
    <script src="js/jquery.min.js"></script>
</head>
<body>

    <nav class="navbar navbar-default navbar-static-top">
        <div class="container">
            <div class="navbar-header" style="width: 100%">
                <a class="navbar-brand"  href="http://crcs.cz/"><img alt="CRoCS" style="display: inline-block;width: 36px;margin-top: -8px;" src="http://crcs.cz/wiki/_media/wiki/logo.png"> CRoCS</a>
                <a class="navbar-brand" style="float: right;margin: 15px;padding: 0;height:  auto;"  href="http://crcs.cz/rsa">The Million-Key Question - Investigating the Origins of RSA Public Keys [Usenix Security 2016]</a>
            </div>
        </div>
    </nav>

    <div class="container">
        <div class="col-md-12">
            <h1>How to use this tool</h1>
            <ol>
                <li>Copy your public key(s) or HTTPS URL into 'Test your keys' box</li>
                <li>Select different prior probability model if you know the key(s) usage scenario</li>
                <li>Press 'Classify' button</li>
                <li>Inspect which libraries/devices (groups) are probable sources for inserted key(s)</li>
                <li>If all public keys are produced by the same (unknown) library/device, inspect also 'Result for the same source' for significantly more accurate classification</li>
                <li>Read more at <a href ="http://crcs.cz/rsa">http://crcs.cz/rsa</a></li>
            </ol>
        </div>
        <div class="col-md-6">
            <h1>Test your keys</h1>
            <form action="" method="post" class="form-horizontal">
                <div class="form-group">
                    <div class="col-sm-12">
                        <label for="keys" class="control-label">ASCII armored RSA key(s) or https url(s) to webserver </label>
                        <textarea name="keys" id="keys" class="form-control" rows="20"><?php
                            if (array_key_exists('keys', $_POST)) {
                                echo htmlspecialchars($_POST['keys']);
                            }
                            else {
                                echo '# The more keys from the same source you will insert, the more precise results you will get.' .PHP_EOL . PHP_EOL . PHP_EOL . '# RSA key was generated by mbedTLS library' . PHP_EOL . $testkey . PHP_EOL . PHP_EOL . '# https url (certificate for fi.muni.cz was generated by OpenSSL)'. PHP_EOL . 'https://fi.muni.cz/';
                            }
                            ?></textarea>
                    </div>
                    <div class="col-sm-12">
                        <?php
                            $apriories = array(
                                "equal" => "1. Equal probability of all groups (default)",
                                "tls" => "2. TLS prior probability",
                                "pgp" => "3. PGP prior probability",
                                "custom" => "4. Custom prior probability (not yet implemented, coming soon)"
                            );

                            foreach ($apriories as $key => $text){
                                $checked = (array_key_exists('apriori', $_POST) && $_POST['apriori'] == $key) || (!array_key_exists('apriori', $_POST) && $key == "equal");
                                echo '<input type="radio" name="apriori" value="' . $key  . '" ' . ($checked ? 'checked' : '') . '> ' . $text . '<br>';
                            }
                        ?>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <button type="submit" class="btn btn-success btn-lg">Classify</button>
                    </div>
                </div>
            </form>
        </div>
        <div class="col-md-6">
            <h1>List of sources</h1>
            <?php
            echo '<table class="table table-condensed"><thead><tr><th style="white-space: nowrap">Group name</th><th>Sources</th></tr></thead><tbody>';
            foreach ($classificationTable->getGroupsNames() as $group) {
                $sources = $classificationTable->getGroupSources($group);
                natcasesort($sources);
                echo '<tr><td style="white-space: nowrap">Group ' . $group . '</td><td>' . implode(', ', $sources) . '</td></tr>';
            }
            echo '</tbody></table>';
            ?>
        </div>

        <div class="col-md-12">
        <?php
        if (array_key_exists('post_id', $_POST)) {
            $post = $database->getPost($_POST["post_id"]);
            if ($post["time"] == $_POST["time"]) {
                $source = $_POST["source"];
                $correct = (array_key_exists("correct", $_POST) && array_key_exists("classified", $_POST) && $_POST["correct"] == $_POST["classified"]);
                $database->setCorrectSource($_POST["post_id"], $correct, (!$correct ? "Classified: ". $_POST["classified"] . ", Correct: " . $_POST["correct"] . ", " : "") . "Message: ". $source);
                echo "<div class=\"row\"><h4 style=\"text-align: center\"><i>Thank you for your feedback.</i></h4></div>";
            }
        }
        if (array_key_exists('keys', $_POST)) {
            /** @var \RSAKeyAnalysis\ClassificationContainer $classificationContainer */
            $classificationContainer = null;

            $maxUrlsClassifiable = $database->getMaxPossibleClassifications(CLASSIFICATION_KEYS_LIMIT, CLASSIFICATION_TIME_LIMIT);
            PublicKeyParser::$maxUrlsClassifiable = $maxUrlsClassifiable;
            $keys = PublicKeyParser::parseMultiFromString($_POST['keys']);
            $correctKeys = 0;
            $duplicateKeys = 0;
            $top = null;
            foreach ($keys as $ink => $key) {
                if ($key["key"] !== null) {
                    $correctKeys++;

                    /** @var \RSAKeyAnalysis\ClassificationRow $classified */
                    $classified = $classificationTable->classifyKey($key["key"]);
                    $sa = "0.0";
                    foreach ($classified->getValues() as $val) {
                        $sa = bcadd(bcmul($val, $val), $sa);
                    }
                    $p = count($classified->getValues());
                    if ($top == null || $p > $top["p"] || ($p == $top["p"] && bccomp($sa, $top["s"]) == -1)) {
                        $top = array(
                            "i" => $ink,
                            "p" => $p,
                            "s" => $sa
                        );
                    }

                    foreach ($keys as $ink2 => $key2) {
                        if ($key2["key"] === null) continue;
                        if ($ink <= $ink2) break;
                        if ($key["key"]->getModulus()->compare($key2["key"]->getModulus()) == 0) {
                            $duplicateKeys++;
                            $keys[$ink2]["duplicity"] = true;
                        }
                    }
                }
            }
            if ($correctKeys > 1) {
                $keys[$top["i"]]["ta"] = true;
            }

            if (count($keys) >= 1) {
                $postId = $database->createPost();
                echo '<script>
                        $(document).ready(function (){
                            $("html, body").animate({
                                scrollTop: $("#results").offset().top
                            }, 1000);
                        });
                      </script>';
                echo "<div class=\"row\" id=\"results\"><h2>We think that your separate key(s) were generated by <small>(sorted from the most probable)</small></h2>" . PHP_EOL;
                $maxNumberOfClassificationExceeded = ($maxUrlsClassifiable < count($keys));
                $sizeOfAlert = 12/(1 + ($maxNumberOfClassificationExceeded ? 1 : 0) + ($correctKeys != count($keys) ? 1 : 0) + ($duplicateKeys > 0 ? 1 : 0));
                if ($correctKeys != count($keys)) {
                    echo '<div class="col-md-' . $sizeOfAlert . '"><div class="alert alert-danger">
                        <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                        We were unable to classify all provided keys 
                      </div></div>';
                }
                if ($maxNumberOfClassificationExceeded) {
                    echo '<div class="col-md-' . $sizeOfAlert . '"><div class="alert alert-danger">
                        <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                        You have exceeded limit of maximum number of keys\' classifications.
                      </div></div>';
                }
                if ($duplicateKeys > 0) {
                    echo '<div class="col-md-' . $sizeOfAlert . '"><div class="alert alert-warning">
                        <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                        There are same duplicities (keys with same modulus)
                      </div></div>';
                }
                echo '<div class="col-md-' . $sizeOfAlert . '"><div class="alert alert-warning">
                        <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                        <strong>Important:</strong> Classification of single key is less accurate
                      </div></div>';
                foreach ($keys as $key) {
                    drawKeyResult($classificationTable, $key);
                    if (!array_key_exists("duplicity", $key)) {
                        $database->createKey($postId, $key["text"]);
                        if ($key["key"] === null) continue;

                        $row = $classificationTable->classifyKey($key["key"]);
                        if ($classificationContainer == null) {
                            $classificationContainer = new \RSAKeyAnalysis\ClassificationContainer(1, $row);
                        } else {
                            $classificationContainer->add(1, $row);
                        }
                    }
                }
                if ($correctKeys >= 1) {
                    echo "</div><div class=\"row\"><h2>Result for same source <small>(all inserted keys are assumed to be generated by the same source)</small></h2>" . PHP_EOL;
                    $probSuccessArray = array(
                        1 => "72%",
                        2 => "87%",
                        3 => "93%",
                        4 => "96%",
                        5 => "97%",
                        10 => "99%",
                        100 => "100.00%"
                    );
                    $rs = $classificationContainer->getNumOfKeys();
                    $resProb = 0;
                    if ($rs <= 5 || $rs == 10 || $rs == 100) $resProb = $probSuccessArray[$rs];
                    else if ($rs < 10) $resProb = /*"more than " .*/ $probSuccessArray[5];
                    else if ($rs < 100) $resProb = /*"more than " .*/ $probSuccessArray[10];
                    else $resProb = /*"more than " .*/ $probSuccessArray[100];
                    echo '<div class="col-md-12"><div class="alert alert-success">
                        <span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>
                        You provided ' . $rs . ' ' . ($duplicateKeys > 0 ? 'unique ' : '') . 'key' . ($rs > 1 ? 's' : '') . '. If these keys were all generated by the same source library then there is about ' . $resProb . ' probability that correct source is identified within the first three most probable groups.
                      </div></div>';
                    drawContainerResult($classificationTable, $classificationContainer);

                    $post = $database->getPost($postId);
                    echo '</div><div class="row"><h4 style="text-align: center"><i>Please give us feedback: click on the source group by which your key(s) were generated and then submit feedback form.</i></h4></div>';
                    echo "<div class=\"row\"><h2>Feedback</h2>";
                    echo '<div class="col-md-12"><form action="" method="post" class="form-inline">
                            <div class="form-group col-md-10">
                                <div class="col-md-6" style="padding: 0;">
                                    <label for="source">Were key(s) generated by other library or anything else you would like to tell us?</label>
                                </div>
                                <div class="col-md-6" style="padding: 0;">
                                    <input type="text" name="source" id="source" class="form-control" style="width:100%">
                                </div>
                            </div>
                            <div class="form-group col-md-2">
                                <input type="hidden" name="post_id" value="' . $postId . '">
                                <input type="hidden" name="correct" id="correct" value="' . reset($classificationContainer->getRow()->getTopGroups(1)) . '">
                                <input type="hidden" name="classified" value="' . reset($classificationContainer->getRow()->getTopGroups(1)) . '">
                                <input type="hidden" name="time" value = "' . $post["time"] . '">
                                <button type="submit" class="btn btn-success">Give feedback</button>
                            </div>
                        </form></div></div>';
                }
            }
            else {
                echo "</div><div class=\"row\"><h4 style=\"text-align: center\"><i>Sorry, no key for classification found.</i></h4></div>";
            }
        }
        ?>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h2>Contact us or share our classification tool</h2>
                <div class="col-md-12">
                    <a href="https://twitter.com/share" class="twitter-share-button" data-size="large" data-text="Information leakage vulnerability - discover which crypto library generated given RSA key!" data-url="http://crcs.cz/rsapp/" data-via="crocs_muni" data-hashtags="1mrsa" data-show-count="false">Tweet</a>
                    <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
                    <a href="mailto:rsa@crcs.cz" class="btn btn-default" role="button" style="margin-top: -19px; padding: 4px 12px;">Mail to rsa@crcs.cz</a>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <h2>Q&amp;A section</h2>

                    <h4>Q: So what did you do?</h4>
                    <p class="col-md-12">
                        A: Figured out that RSA public key is leaking info about a library which created it. So we can tell which library you used for your key - based on public key only.
                    </p>

                    <h4>Q: Is single key enough to identify source library?</h4>
                    <p class="col-md-12">
                        A: Sometimes yes, but mostly no. If you have 5 keys from the same source, it will be quite accurate. Just press Classify button above.
                    </p>

                    <h4>Q: Can I mutually distinguish all libraries?</h4>
                    <p class="col-md-12">
                        A: Not always. Source libraries introducing exactly same bias to the value of generated public moduli will be undistinguishable.
                    </p>

                    <h4>Q: Can I identify also the version of used library?</h4>
                    <p class="col-md-12">
                        A: Sometimes. The new version of a library that did not change source code of key generation method will not be distinguishable from the older one. E.g., OpenSSL 1.0.2f is not distinguishable from OpenSSL 1.0.2g, but OpenSSL 1.0.2g is distinguishable from OpenSSL 2.0.12 FIPS.
                    </p>

                    <h4>Q: Have you tested all libraries of the world?</h4>
                    <p class="col-md-12">
                        A: No. We test a lot of them, but not all. We also did not test all possible version of given library. We are also missing hardware sources like SSL accelerators (contact us please, if you have one and like to contribute).
                    </p>

                    <h4>Q: How quickly will be the information leakage vulnerability you found fixed?</h4>
                    <p class="col-md-12">
                        A: Probably not soon. The fix would require changing code of key generation method for the most libraries. And developers don&#039;t like to mess with that part of crypto too often. Even if fixed in the new version, lot of old legacy libraries will use for a long time.
                    </p>

                    <h4>Q: So how can I protect my key(s)?</h4>
                    <p class="col-md-12">
                        A: If you need just one key, it is easy - just generate 5 keys instead of one, let all to be classified by our tool (<a href="http://crcs.cz/rsapp/" class="urlextern" target="_blank" title="http://crcs.cz/rsapp/" rel="nofollow noopener">http://crcs.cz/rsapp/</a>) and then keep the one which is classified with the least accuracy. If you need more keys to keep, it is slightly more tricky, but still can be done (with more keys generated and discarded).
                    </p>

                    <h4>Q: Are data you gathered and used publicly available?</h4>
                    <p class="col-md-12">
                        A: Definitely! Download everything in datasets section and try own analysis. Please don&#039;t forget to cite us.
                    </p>

                    <h4>Q: I want to know more details!</h4>
                    <p class="col-md-12">
                        A: Great, then read <a href="http://crcs.cz/wiki/_media/public/papers/usenixsec16_1mrsakeys.pdf" class="media mediafile mf_pdf wikilink2" target="_blank" title="public:papers:usenixsec16_1mrsakeys.pdf" rel="noopener">original paper</a> and <a href="http://crcs.cz/wiki/_media/public/papers/usenixsec16_1mrsakeys_trfimu_201603.pdf" class="media mediafile mf_pdf wikilink2" target="_blank" title="public:papers:usenixsec16_1mrsakeys_trfimu_201603.pdf" rel="noopener">technical report</a> for even more details.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <script src="js/tether.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/script.js"></script>
</body>
</html>
